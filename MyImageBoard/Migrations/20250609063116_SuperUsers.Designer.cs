// <auto-generated />
using System;
using ForumProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForumProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250609063116_SuperUsers")]
    partial class SuperUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ForumProject.Data.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasComplaint")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int");

                    b.Property<string>("Tripcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("ThreadId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FingerprintId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ThreadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("FingerprintId");

                    b.HasIndex("ThreadId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ThreadId")
                        .HasColumnType("int");

                    b.Property<int>("UserFingerprintId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserFingerprintId", "CommentId")
                        .IsUnique()
                        .HasFilter("[CommentId] IS NOT NULL");

                    b.HasIndex("UserFingerprintId", "ThreadId")
                        .IsUnique()
                        .HasFilter("[ThreadId] IS NOT NULL");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ForumProject.Data.Models.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int?>("ThreadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ThreadId");

                    b.ToTable("MediaFiles", t =>
                        {
                            t.HasCheckConstraint("CK_MediaFile_SingleParent", "(ThreadId IS NULL AND CommentId IS NOT NULL) OR (ThreadId IS NOT NULL AND CommentId IS NULL)");
                        });
                });

            modelBuilder.Entity("ForumProject.Data.Models.Moderator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Moderators");
                });

            modelBuilder.Entity("ForumProject.Data.Models.ModeratorRoleGroup", b =>
                {
                    b.Property<int>("ModeratorId")
                        .HasColumnType("int");

                    b.Property<int>("RoleGroupId")
                        .HasColumnType("int");

                    b.HasKey("ModeratorId", "RoleGroupId");

                    b.HasIndex("RoleGroupId");

                    b.ToTable("ModeratorRoleGroups");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("ForumProject.Data.Models.QuizOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VotesCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizOptions");
                });

            modelBuilder.Entity("ForumProject.Data.Models.QuizVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizOptionId")
                        .HasColumnType("int");

                    b.Property<int>("UserFingerprintId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizOptionId");

                    b.HasIndex("UserFingerprintId", "QuizOptionId")
                        .IsUnique();

                    b.ToTable("QuizVotes");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ForumProject.Data.Models.RoleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RoleGroups");
                });

            modelBuilder.Entity("ForumProject.Data.Models.RoleGroupRole", b =>
                {
                    b.Property<int>("RoleGroupId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleGroupId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGroupRoles");
                });

            modelBuilder.Entity("ForumProject.Data.Models.SiteThread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasComplaint")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Tripcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("ForumProject.Data.Models.SuperUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuperUserGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SuperUserGroupId");

                    b.ToTable("SuperUsers");
                });

            modelBuilder.Entity("ForumProject.Data.Models.SuperUserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SuperUserGroups");
                });

            modelBuilder.Entity("ForumProject.Data.Models.SuperUserGroupPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("SuperUserGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("SuperUserGroupId");

                    b.ToTable("SuperUserGroupPermissions");
                });

            modelBuilder.Entity("ForumProject.Data.Models.SuperUserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("SuperUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("SuperUserId");

                    b.ToTable("SuperUserPermissions");
                });

            modelBuilder.Entity("ForumProject.Data.Models.UserFingerprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FingerprintHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FingerprintHash")
                        .IsUnique();

                    b.ToTable("UserFingerprints");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Comment", b =>
                {
                    b.HasOne("ForumProject.Data.Models.Comment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ForumProject.Data.Models.SiteThread", "Thread")
                        .WithMany("Comments")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Complaint", b =>
                {
                    b.HasOne("ForumProject.Data.Models.Comment", "Comment")
                        .WithMany("Complaints")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ForumProject.Data.Models.UserFingerprint", "Fingerprint")
                        .WithMany()
                        .HasForeignKey("FingerprintId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ForumProject.Data.Models.SiteThread", "Thread")
                        .WithMany("Complaints")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Comment");

                    b.Navigation("Fingerprint");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Like", b =>
                {
                    b.HasOne("ForumProject.Data.Models.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ForumProject.Data.Models.SiteThread", "Thread")
                        .WithMany("Likes")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ForumProject.Data.Models.UserFingerprint", "UserFingerprint")
                        .WithMany()
                        .HasForeignKey("UserFingerprintId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Thread");

                    b.Navigation("UserFingerprint");
                });

            modelBuilder.Entity("ForumProject.Data.Models.MediaFile", b =>
                {
                    b.HasOne("ForumProject.Data.Models.Comment", "Comment")
                        .WithMany("MediaFiles")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ForumProject.Data.Models.SiteThread", "Thread")
                        .WithMany("MediaFiles")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Comment");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("ForumProject.Data.Models.ModeratorRoleGroup", b =>
                {
                    b.HasOne("ForumProject.Data.Models.Moderator", "Moderator")
                        .WithMany("ModeratorRoleGroups")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ForumProject.Data.Models.RoleGroup", "RoleGroup")
                        .WithMany("ModeratorRoleGroups")
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("RoleGroup");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Quiz", b =>
                {
                    b.HasOne("ForumProject.Data.Models.SiteThread", "Thread")
                        .WithMany("Quizzes")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("ForumProject.Data.Models.QuizOption", b =>
                {
                    b.HasOne("ForumProject.Data.Models.Quiz", "Quiz")
                        .WithMany("Options")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("ForumProject.Data.Models.QuizVote", b =>
                {
                    b.HasOne("ForumProject.Data.Models.QuizOption", "QuizOption")
                        .WithMany("Votes")
                        .HasForeignKey("QuizOptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ForumProject.Data.Models.UserFingerprint", "UserFingerprint")
                        .WithMany()
                        .HasForeignKey("UserFingerprintId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuizOption");

                    b.Navigation("UserFingerprint");
                });

            modelBuilder.Entity("ForumProject.Data.Models.RoleGroupRole", b =>
                {
                    b.HasOne("ForumProject.Data.Models.RoleGroup", "RoleGroup")
                        .WithMany("RoleGroupRoles")
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ForumProject.Data.Models.Role", "Role")
                        .WithMany("RoleGroupRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("RoleGroup");
                });

            modelBuilder.Entity("ForumProject.Data.Models.SiteThread", b =>
                {
                    b.HasOne("ForumProject.Data.Models.Board", "Board")
                        .WithMany("Threads")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("ForumProject.Data.Models.SuperUser", b =>
                {
                    b.HasOne("ForumProject.Data.Models.SuperUserGroup", "Group")
                        .WithMany("SuperUsers")
                        .HasForeignKey("SuperUserGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ForumProject.Data.Models.SuperUserGroupPermission", b =>
                {
                    b.HasOne("ForumProject.Data.Models.Permission", "Permission")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ForumProject.Data.Models.SuperUserGroup", "SuperUserGroup")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("SuperUserGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("SuperUserGroup");
                });

            modelBuilder.Entity("ForumProject.Data.Models.SuperUserPermission", b =>
                {
                    b.HasOne("ForumProject.Data.Models.Permission", "Permission")
                        .WithMany("SuperUserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ForumProject.Data.Models.SuperUser", "SuperUser")
                        .WithMany("SuperUserPermissions")
                        .HasForeignKey("SuperUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("SuperUser");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Board", b =>
                {
                    b.Navigation("Threads");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Comment", b =>
                {
                    b.Navigation("ChildComments");

                    b.Navigation("Complaints");

                    b.Navigation("Likes");

                    b.Navigation("MediaFiles");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Moderator", b =>
                {
                    b.Navigation("ModeratorRoleGroups");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Permission", b =>
                {
                    b.Navigation("GroupPermissions");

                    b.Navigation("SuperUserPermissions");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Quiz", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("ForumProject.Data.Models.QuizOption", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ForumProject.Data.Models.Role", b =>
                {
                    b.Navigation("RoleGroupRoles");
                });

            modelBuilder.Entity("ForumProject.Data.Models.RoleGroup", b =>
                {
                    b.Navigation("ModeratorRoleGroups");

                    b.Navigation("RoleGroupRoles");
                });

            modelBuilder.Entity("ForumProject.Data.Models.SiteThread", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Complaints");

                    b.Navigation("Likes");

                    b.Navigation("MediaFiles");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("ForumProject.Data.Models.SuperUser", b =>
                {
                    b.Navigation("SuperUserPermissions");
                });

            modelBuilder.Entity("ForumProject.Data.Models.SuperUserGroup", b =>
                {
                    b.Navigation("GroupPermissions");

                    b.Navigation("SuperUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
