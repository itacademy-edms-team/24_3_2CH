@using ForumProject.Configuration

<div class="file-upload-container">
    <div class="file-upload-input">
        <input type="file" 
               id="fileInput" 
               multiple 
               accept="@string.Join(",", MediaFileSettings.AllowedMimeTypes)" 
               style="display: none;" />
        <button type="button" class="btn btn-primary" onclick="document.getElementById('fileInput').click()">
            Выбрать файлы
        </button>
    </div>
    <div id="filePreviewContainer" class="file-preview-container"></div>
    <div id="fileUploadError" class="text-danger"></div>
</div>

<link rel="stylesheet" href="/css/file-upload-partial.css" />

<script>
    let selectedFiles = new Map();
    
    document.getElementById('fileInput').addEventListener('change', function(e) {
        const files = Array.from(e.target.files || []);
        const errorElement = document.getElementById('fileUploadError');
        
        // Проверка количества файлов
        if (selectedFiles.size + files.length > @MediaFileSettings.MaxFilesPerThread) {
            errorElement.textContent = `Максимальное количество файлов: @MediaFileSettings.MaxFilesPerThread`;
            return;
        }
        
        // Проверка общего размера
        let totalSize = Array.from(selectedFiles.values()).reduce((sum, file) => sum + file.size, 0);
        totalSize += files.reduce((sum, file) => sum + file.size, 0);
        
        if (totalSize > @MediaFileSettings.MaxTotalSizeBytes) {
            errorElement.textContent = 'Превышен максимальный общий размер файлов (50 МБ)';
            return;
        }
        
        errorElement.textContent = '';
        
        files.forEach(file => {
            const fileId = Date.now() + '_' + file.name;
            selectedFiles.set(fileId, file);
            displayFilePreview(file, fileId);
        });
        
        // Очищаем input для возможности повторного выбора тех же файлов
        e.target.value = '';
    });
    
    function displayFilePreview(file, fileId) {
        const container = document.getElementById('filePreviewContainer');
        const preview = document.createElement('div');
        preview.className = 'file-preview';
        preview.id = `preview_${fileId}`;
        
        // Создаем превью в зависимости от типа файла
        if (file.type.startsWith('image/')) {
            const img = document.createElement('img');
            img.src = URL.createObjectURL(file);
            preview.appendChild(img);
        } else if (file.type.startsWith('video/')) {
            const video = document.createElement('video');
            video.src = URL.createObjectURL(file);
            video.controls = true;
            preview.appendChild(video);
        }
        
        // Кнопка удаления
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'delete-button';
        deleteBtn.innerHTML = '×';
        deleteBtn.onclick = () => {
            selectedFiles.delete(fileId);
            preview.remove();
        };
        preview.appendChild(deleteBtn);
        
        // Информация о файле
        const info = document.createElement('div');
        info.className = 'file-info';
        info.textContent = `${file.name} (${formatFileSize(file.size)})`;
        preview.appendChild(info);
        
        container.appendChild(preview);
    }
    
    function formatFileSize(bytes) {
        if (bytes < 1024) return bytes + ' B';
        else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
        else return (bytes / 1048576).toFixed(1) + ' MB';
    }
    
    function getSelectedFiles() {
        const formData = new FormData();
        selectedFiles.forEach(file => {
            formData.append('Files', file);
        });
        return formData;
    }
</script> 